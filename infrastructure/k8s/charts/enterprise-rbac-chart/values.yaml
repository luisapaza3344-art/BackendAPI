# Enterprise RBAC Service - Kubernetes Helm Chart Values
# FIPS 140-3 Level 3 Compliant Configuration

replicaCount: 3

image:
  repository: enterprise-rbac-service
  pullPolicy: Always
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "enterprise-rbac"

serviceAccount:
  create: true
  annotations: {}
  name: "enterprise-rbac-sa"

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  name: http

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/secure-backends: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: rbac.enterprise.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: enterprise-rbac-tls
      hosts:
        - rbac.enterprise.local

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector:
  node.kubernetes.io/instance-type: "m5.large"

tolerations:
  - key: "enterprise-workload"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - enterprise-rbac
        topologyKey: kubernetes.io/hostname

# Enterprise Configuration
config:
  server:
    port: 8080
    timeout: "30s"
    
  database:
    host: "postgresql-ha.database.svc.cluster.local"
    port: 5432
    database: "enterprise_rbac"
    ssl_mode: "require"
    max_connections: 100
    
  redis:
    host: "redis-cluster.cache.svc.cluster.local"
    port: 6379
    database: 2
    
  security:
    jwt_secret_key: "enterprise-jwt-secret"
    session_timeout: "24h"
    password_policy:
      min_length: 12
      require_uppercase: true
      require_lowercase: true
      require_numbers: true
      require_symbols: true
      
  fips:
    enabled: true
    level: "140-3_Level_3"
    hsm_provider: "aws_cloudhsm"
    
  audit:
    enabled: true
    retention_days: 2555  # 7 years
    blockchain_anchoring: true
    
  monitoring:
    prometheus_enabled: true
    jaeger_enabled: true
    log_level: "info"

# Secrets (will be populated by external secret manager)
secrets:
  database_url: ""
  redis_url: ""
  jwt_secret: ""
  hsm_credentials: ""
  
# Enterprise Features
enterprise:
  multi_tenancy:
    enabled: true
    isolation_level: "strict"
    
  compliance:
    pci_dss: true
    sox: true
    gdpr: true
    hipaa: true
    
  integrations:
    active_directory: true
    okta: true
    azure_ad: true
    google_workspace: true
    
  backup:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM
    retention_days: 90
    encryption: true

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: payment-gateway
      - namespaceSelector:
          matchLabels:
            name: security-service
      - namespaceSelector:
          matchLabels:
            name: api-gateway
      ports:
      - protocol: TCP
        port: 8080

# Service Monitor for Prometheus
serviceMonitor:
  enabled: true
  namespace: monitoring
  labels:
    app: enterprise-rbac
  interval: 30s
  path: /metrics